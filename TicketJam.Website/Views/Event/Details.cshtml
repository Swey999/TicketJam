@model TicketJam.Website.APIClient.DTO.Event

@{
    var ticketList = Model.TicketList;
}

<h1>Event Details</h1>
<hr />

@if (ticketList != null && ticketList.Any())
{
    @* Ticket Dropdown *@
    <div class="form-group">
        <label for="ticketDropdown">Select a Ticket</label>
        <select id="ticketDropdown" class="form-control">
            <option value="">-- Select Ticket --</option>
            @for (int i = 0; i < ticketList.Count; i++)
            {
                <option value="@i">Ticket @ticketList[i].TicketCategory - @ticketList[i].Price.ToString("C")</option>
            }
        </select>
    </div>

    <div class="form-group mt-3">
        <label for="ticketQuantity">Select Quantity</label>
        <input id="ticketQuantity" type="number" class="form-control" min="1" value="1" />
    </div>

    <button class="btn btn-primary mt-3" onclick="addToBasket()">Add to Basket</button>

    <hr />

    @* Basket Display *@
    <div>
        <h4>Basket</h4>
        <ul id="basketList" class="list-group"></ul>
        <button class="btn btn-success mt-" onclick="ConfirmOrder()">Checkout</button>
    </div>

    <script>
        const ticketDetails = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ticketList));
        const basket = [];

        function addToBasket() {
            const dropdown = document.getElementById("ticketDropdown");
            const quantityInput = document.getElementById("ticketQuantity");
            const selectedIndex = dropdown.value;

            if (selectedIndex === "") return alert("Please select a ticket");

            const ticket = ticketDetails[selectedIndex];
            const quantity = parseInt(quantityInput.value, 10);

            // Add selected ticket to basket
            basket.push({
                ticket: { id: ticket.Id, ticketCategory: ticket.TicketCategory, price: ticket.Price },
                quantity: quantity
            });

            // Update basket display
            const basketList = document.getElementById("basketList");
            const listItem = document.createElement("li");
            listItem.textContent = `${quantity} x ${ticket.TicketCategory} at ${ticket.Price.toFixed(2)}`;
            basketList.appendChild(listItem);
        }

        function ConfirmOrder() {
            const order = {
                customer: null, // Add customer data if needed
                orderLines: basket.map(item => ({
                    quantity: item.quantity,
                    ticket: item.ticket
                }))
            };

            // Save order data to local storage
            localStorage.setItem("pendingOrder", JSON.stringify(order));

            // Redirect to Order/Create page for final confirmation
            window.location.href = '@Url.Action("Create", "Order")';
        }
    </script>
}
else
{
    <p>No tickets available.</p>
}
